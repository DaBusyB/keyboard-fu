@log = (args...) ->

    chrome.extension.sendRequest action: 'console', fn: 'info', args

@readKeyCombo = (e, preventDefault) ->

    keyChar = ""

    keyCodes = { ESC: 27, backspace: 8, deleteKey: 46, enter: 13, space: 32, shiftKey: 16, f1: 112, f12: 123}

    keyNames = { 37: "left", 38: "up", 39: "right", 40: "down" }

    # This is a mapping of the incorrect keyIdentifiers generated by Webkit on Windows during keydown events to
    # the correct identifiers, which are correctly generated on Mac. We require this mapping to properly handle
    # these keys on Windows. See https://bugs.webkit.org/show_bug.cgi?id=19906 for more details.
    keyIdentifierCorrectionMap = {
        "U+00C0": ["U+0060", "U+007E"], # `~
        "U+00BD": ["U+002D", "U+005F"], # -_
        "U+00BB": ["U+003D", "U+002B"], # =+
        "U+00DB": ["U+005B", "U+007B"], # [{
        "U+00DD": ["U+005D", "U+007D"], # ]}
        "U+00DC": ["U+005C", "U+007C"], # \|
        "U+00BA": ["U+003B", "U+003A"], # ;:
        "U+00DE": ["U+0027", "U+0022"], # '"
        "U+00BC": ["U+002C", "U+003C"], # ,<
        "U+00BE": ["U+002E", "U+003E"], # .>
        "U+00BF": ["U+002F", "U+003F"] # /?
    }

    platform = if navigator.userAgent.indexOf("Mac") isnt -1
                   "Mac"
               else if navigator.userAgent.indexOf("Linux") isnt -1
                   "Linux"
               else
                   "Windows"

    if e.type is 'keydown'

        # handle modifiers being pressed.don't handle shiftKey alone (to avoid / being interpreted as ?
        if (e.metaKey or e.ctrlKey or e.altKey) and e.keyCode > 31

            e.preventDefault() if preventDefault

            # Not a letter
            if e.keyIdentifier.slice(0, 2) isnt "U+"
                # Named key
                if keyNames[e.keyCode]
                    return keyNames[e.keyCode]

                # F-key
                if e.keyCode >= keyCodes.f1 and e.keyCode <= keyCodes.f12
                    return "f" + (1 + e.keyCode - keyCodes.f1)

                return ""

            keyIdentifier = e.keyIdentifier

            # On Windows, the keyIdentifiers for non-letter keys are incorrect. See
            # https://bugs.webkit.org/show_bug.cgi?id=19906 for more details.
            if (platform == "Windows" or platform == "Linux") and keyIdentifierCorrectionMap[keyIdentifier]
                correctedIdentifiers = keyIdentifierCorrectionMap[keyIdentifier]
                keyIdentifier = if e.shiftKey then correctedIdentifiers[0] else correctedIdentifiers[1]

            unicodeKeyInHex = "0x" + keyIdentifier.substring(2)

            keyChar = String.fromCharCode(parseInt(unicodeKeyInHex)).toLowerCase()

            # Again, ignore just modifiers. Maybe this should replace the keyCode > 31 condition.
            if keyChar isnt ""

                keyChar = keyChar.toUpperCase() if e.shiftKey

                modifiers = []
                modifiers.push("M") if e.metaKey
                modifiers.push("C") if e.ctrlKey
                modifiers.push("A") if e.altKey

                keyChar = modifiers.join('-') + (if modifiers.length is 0 then '' else '-') + keyChar

                if modifiers.length > 0 or keyChar.length > 1
                    keyChar = "<" + keyChar + ">"

    else if e.type is 'keypress'

        # Ignore modifier keys by themselves.
        if e.keyCode > 31
            keyChar = String.fromCharCode e.charCode

    log 'key char', keyChar
    keyChar

# Gives a string that is a regex representation of the given glob pattern
@globToRegex = (line) ->

    log "got line [" + line + "]"
    line = $.trim line
    
    sb = []
    
    # Remove beginning and ending * globs because they're useless
    if line.length > 1 and line[0] is "*"
        line = line.substring(1)

    if line.length > 1 and line[line.length-1] is "*"
        line = line.substring(0, line.length - 1)
    
    i = 0
    len = line.length

    escaping = no
    inCurlies = 0

    while (i < len)
        currentChar = line[i++]
        switch currentChar
            when '*'
                sb.push(if escaping then "\\*" else ".*")
                escaping = no
            when '?'
                sb.push(if escaping then "\\?" else ".")
                escaping = no
            when '.', '(', ')', '+', '|', '^', '$', '@', '%'
                sb.push('\\')
                sb.push(currentChar)
                escaping = no
            when '\\'
                sb.push("\\\\") if escaping
                escaping = not escaping
            when '{'
                sb.push(if escaping then '\\{' else '(')
                inCurlies++ unless escaping
                escaping = no
            when '}'
                if inCurlies > 0 and not escaping
                    sb.push(')')
                    inCurlies--
                else if escaping
                    sb.push("\\}")
                else
                    sb.push("}")
                escaping = no
            when ','
                if inCurlies > 0 and not escaping
                    sb.push('|')
                else if escaping
                    sb.push("\\,")
                else
                    sb.push(",")
            else
                sb.push(currentChar)
                escaping = no

    sb.join ''

# Adapted from https://github.com/kvz/phpjs/raw/master/functions/strings/htmlentities.js
@htmlentities = (string, quote_style) ->
    hash_map = get_html_translation_table('HTML_ENTITIES', quote_style)

    return false unless hash_map

    hash_map["'"] = '&#039;'

    symbol = ''
    tmp_str = ''
    entity = ''
    tmp_str = string.toString()

    for symbol, entity of hash_map
        tmp_str = tmp_str.split(symbol).join(entity)

    tmp_str

# Adapted from https://github.com/kvz/phpjs/raw/master/functions/strings/get_html_translation_table.js
@get_html_translation_table = (table, quote_style) ->
    entities = {}
    hash_map = {}
    decimal = 0
    symbol = ''
    constMappingTable = {}
    constMappingQuoteStyle = {}
    useTable = {}
    useQuoteStyle = {}

    # Translate arguments
    constMappingTable[0] = 'HTML_SPECIALCHARS'
    constMappingTable[1] = 'HTML_ENTITIES'
    constMappingQuoteStyle[0] = 'ENT_NOQUOTES'
    constMappingQuoteStyle[2] = 'ENT_COMPAT'
    constMappingQuoteStyle[3] = 'ENT_QUOTES'

    useTable = if not isNaN(table) then constMappingTable[table] else (if table then table.toUpperCase() else 'HTML_SPECIALCHARS')
    useQuoteStyle = if not isNaN(quote_style) then constMappingQuoteStyle[quote_style] else (if quote_style then quote_style.toUpperCase() else 'ENT_COMPAT')

    if useTable isnt 'HTML_SPECIALCHARS' and useTable isnt 'HTML_ENTITIES'
        throw new Error("Table: #{useTable} not supported")
        # return false

    entities['38'] = '&amp;'
    if useTable is 'HTML_ENTITIES'
        entities['160'] = '&nbsp;'
        entities['161'] = '&iexcl;'
        entities['162'] = '&cent;'
        entities['163'] = '&pound;'
        entities['164'] = '&curren;'
        entities['165'] = '&yen;'
        entities['166'] = '&brvbar;'
        entities['167'] = '&sect;'
        entities['168'] = '&uml;'
        entities['169'] = '&copy;'
        entities['170'] = '&ordf;'
        entities['171'] = '&laquo;'
        entities['172'] = '&not;'
        entities['173'] = '&shy;'
        entities['174'] = '&reg;'
        entities['175'] = '&macr;'
        entities['176'] = '&deg;'
        entities['177'] = '&plusmn;'
        entities['178'] = '&sup2;'
        entities['179'] = '&sup3;'
        entities['180'] = '&acute;'
        entities['181'] = '&micro;'
        entities['182'] = '&para;'
        entities['183'] = '&middot;'
        entities['184'] = '&cedil;'
        entities['185'] = '&sup1;'
        entities['186'] = '&ordm;'
        entities['187'] = '&raquo;'
        entities['188'] = '&frac14;'
        entities['189'] = '&frac12;'
        entities['190'] = '&frac34;'
        entities['191'] = '&iquest;'
        entities['192'] = '&Agrave;'
        entities['193'] = '&Aacute;'
        entities['194'] = '&Acirc;'
        entities['195'] = '&Atilde;'
        entities['196'] = '&Auml;'
        entities['197'] = '&Aring;'
        entities['198'] = '&AElig;'
        entities['199'] = '&Ccedil;'
        entities['200'] = '&Egrave;'
        entities['201'] = '&Eacute;'
        entities['202'] = '&Ecirc;'
        entities['203'] = '&Euml;'
        entities['204'] = '&Igrave;'
        entities['205'] = '&Iacute;'
        entities['206'] = '&Icirc;'
        entities['207'] = '&Iuml;'
        entities['208'] = '&ETH;'
        entities['209'] = '&Ntilde;'
        entities['210'] = '&Ograve;'
        entities['211'] = '&Oacute;'
        entities['212'] = '&Ocirc;'
        entities['213'] = '&Otilde;'
        entities['214'] = '&Ouml;'
        entities['215'] = '&times;'
        entities['216'] = '&Oslash;'
        entities['217'] = '&Ugrave;'
        entities['218'] = '&Uacute;'
        entities['219'] = '&Ucirc;'
        entities['220'] = '&Uuml;'
        entities['221'] = '&Yacute;'
        entities['222'] = '&THORN;'
        entities['223'] = '&szlig;'
        entities['224'] = '&agrave;'
        entities['225'] = '&aacute;'
        entities['226'] = '&acirc;'
        entities['227'] = '&atilde;'
        entities['228'] = '&auml;'
        entities['229'] = '&aring;'
        entities['230'] = '&aelig;'
        entities['231'] = '&ccedil;'
        entities['232'] = '&egrave;'
        entities['233'] = '&eacute;'
        entities['234'] = '&ecirc;'
        entities['235'] = '&euml;'
        entities['236'] = '&igrave;'
        entities['237'] = '&iacute;'
        entities['238'] = '&icirc;'
        entities['239'] = '&iuml;'
        entities['240'] = '&eth;'
        entities['241'] = '&ntilde;'
        entities['242'] = '&ograve;'
        entities['243'] = '&oacute;'
        entities['244'] = '&ocirc;'
        entities['245'] = '&otilde;'
        entities['246'] = '&ouml;'
        entities['247'] = '&divide;'
        entities['248'] = '&oslash;'
        entities['249'] = '&ugrave;'
        entities['250'] = '&uacute;'
        entities['251'] = '&ucirc;'
        entities['252'] = '&uuml;'
        entities['253'] = '&yacute;'
        entities['254'] = '&thorn;'
        entities['255'] = '&yuml;'

    if useQuoteStyle isnt 'ENT_NOQUOTES'
        entities['34'] = '&quot;'

    if useQuoteStyle is 'ENT_QUOTES'
        entities['39'] = '&#39;'

    entities['60'] = '&lt;'
    entities['62'] = '&gt;'

    # ascii decimals to real symbols
    for decimal, entity of entities
        symbol = String.fromCharCode(decimal)
        hash_map[symbol] = entity

    hash_map
